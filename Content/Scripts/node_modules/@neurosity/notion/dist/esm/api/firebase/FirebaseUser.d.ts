import { Observable } from "rxjs";
import firebase from "firebase/app";
import { User } from "@firebase/auth-types";
import { FirebaseApp } from "./FirebaseApp";
import { Credentials, EmailAndPassword, CustomToken } from "../../types/credentials";
import { DeviceInfo } from "../../types/deviceInfo";
/**
 * @hidden
 */
export declare const credentialWithLink: Function;
/**
 * @hidden
 */
export declare function createUser(...args: any[]): any;
/**
 * @hidden
 */
export declare class FirebaseUser {
    app: firebase.app.App;
    user: User | null;
    constructor(firebaseApp: FirebaseApp);
    auth(): firebase.auth.Auth;
    createAccount(credentials: EmailAndPassword): Promise<any>;
    deleteAccount(): Promise<void>;
    onAuthStateChanged(): Observable<User | null>;
    onLogin(): Observable<User>;
    login(credentials: Credentials): Promise<firebase.auth.UserCredential>;
    logout(): Promise<void>;
    createCustomToken(): Promise<CustomToken>;
    getDevices(): Promise<DeviceInfo[]>;
    addDevice(deviceId: string): Promise<void>;
    removeDevice(deviceId: string): Promise<void>;
    isDeviceIdValid(deviceId: string): Promise<boolean>;
    onUserDevicesChange(): Observable<DeviceInfo[]>;
    private userDevicesToDeviceInfoList;
    hasDevicePermission(deviceId: string): Promise<boolean>;
    private getDeviceClaimedByPath;
    private getUserClaimedDevicePath;
    private getUserDevicesPath;
    private getDeviceInfoPath;
}
