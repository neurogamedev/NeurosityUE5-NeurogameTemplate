import { Observable } from "rxjs";
import { ApiClient, createUser } from "./api/index";
import { NotionOptions } from "./types/options";
import { Training } from "./types/training";
import { Credentials } from "./types/credentials";
import { Settings } from "./types/settings";
import { SignalQuality } from "./types/signalQuality";
import { Kinesis } from "./types/kinesis";
import { Calm } from "./types/calm";
import { Focus } from "./types/focus";
import { BrainwavesLabel, Epoch, PowerByBand, PSD } from "./types/brainwaves";
import { Accelerometer } from "./types/accelerometer";
import { DeviceInfo } from "./types/deviceInfo";
import { DeviceStatus } from "./types/status";
/**
 * Example
 * ```typescript
 * import { Notion } from "@neurosity/notion";
 *
 * const notion = new Notion();
 * ```
 */
export declare class Notion {
    /**
     * @hidden
     */
    protected options: NotionOptions;
    /**
     * @hidden
     */
    protected api: ApiClient;
    /**
     *
     * @hidden
     */
    static credentialWithLink: Function;
    /**
     *
     * @hidden
     */
    static createUser: typeof createUser;
    /**
     *
     * @hidden
     */
    static SERVER_TIMESTAMP: Object;
    /**
     * Creates new instance of Notion
     *
     * ```typescript
     * const notion = new Notion();
     * ```
  
     * @param options
     */
    constructor(options?: NotionOptions);
    /**
     * Starts user session
     *
     * ```typescript
     * await notion.login({
     *   email: "...",
     *   password: "..."
     * });
     * ```
     *
     * @param credentials
     */
    login(credentials: Credentials): Promise<void>;
    /**
     * Ends user session
     *
     * ```typescript
     * await notion.logout();
     * // session has ended
     * ```
     *
     */
    logout(): Promise<void>;
    /**
     * Get user devices
     *
     * Returns a list of devices claimed by the user authenticated.
     *
     * ```typescript
     * const devices = await notion.getDevices();
     * console.log(devices);
     * ```
     */
    getDevices(): Promise<DeviceInfo[]>;
    /**
     * Select Device
     *
     * Rarely necessary, but useful when the user owns multiple devices.
     *
     * A common use case for manually selecting a device is when you wish to build a device dropdown a user can select from, instead of collecting the Device Id from the user ahead of time.
     *
     * The 3 steps to manually selecting a device are:
     *
     * - Set `autoSelectDevice` to false when instantiating `Notion`.
     * - Authenticate with your Neurosity account to access your devices by calling the `notion.login(...)` function.
     * - Call the `notion.selectDevice(...)` function with a device selector function.
     *
     * ```typescript
     * const devices = await notion.selectDevice((devices) =>
     *   devices.find((device) => device.deviceNickname === "Notion-A1B")
     * );
     *
     * console.log(devices);
     * ```
     *
     * > If you own multiple devices, and don't pass `autoSelectDevice`, then the first device on the list will be automatically selected.
     *
     * For more info, check out the "Device Selection" guide.
     */
    selectDevice(deviceSelector: (devices: DeviceInfo[]) => DeviceInfo): Promise<DeviceInfo>;
    /**
     * Get selected device
     *
     * ```typescript
     * const selectedDevice = await notion.getSelectedDevice();
     * console.log(selectedDevice);
     * ```
     */
    getSelectedDevice(): Promise<DeviceInfo>;
    /**
     * ```typescript
     * const info = await notion.getInfo();
     * ```
     */
    getInfo(): Promise<DeviceInfo>;
    /**
     * Observes Local Mode changes
     *
     * ```typescript
     * notion.isLocalMode().subscribe(isLocalMode => {
     *  console.log(isLocalMode);
     * });
     * ```
     */
    isLocalMode(): Observable<boolean>;
    /**
     * Observes selected device
     *
     * ```typescript
     * notion.onDeviceChange().subscribe(device => {
     *  console.log(device);
     * });
     * ```
     */
    onDeviceChange(): Observable<DeviceInfo>;
    /**
     * Enables/disables local mode
     *
     * With local mode, device metrics like brainwaves, calm, focus, etc will stream
     * via your local WiFi network and not the default cloud server.
     *
     * Local Mode is disabled by default, to enable it:
     *
     * ```typescript
     * await notion.enableLocalMode(true);
     * ```
     *
     * To disable it:
     *
     * ```typescript
     * await notion.enableLocalMode(false);
     * ```
     *
     * Keep in mind:
     *  - Activity Logging will <em>not work</em> while this setting is enabled.
     *  - Your Notion must be connected to the same WiFi network as this device to establish communication.
     *  - An internet connection is still needed to authenticate, get device status and add metric subscriptions.
     *  - This setting is not global and needs to be set for every Notion app you wish to affect.
     */
    enableLocalMode(shouldEnable: boolean): Promise<boolean>;
    /**
     * Ends database connection
     *
     * ```typescript
     * await notion.disconnect();
     * ```
     */
    disconnect(): Promise<void>;
    /**
     * Injects an EEG marker to data stream
     *
     * ```typescript
     * notion.addMarker("eyes-closed");
     *
     * // later...
     *
     * notion.addMarker("eyes-open");
     * ```
     *
     * @param label Name the label to inject
     */
    addMarker(label: string): void;
    /**
     * Observes accelerometer data
     * Supported by Notion 2 and the Crown.
     *
     * ```typescript
     * notion.accelerometer().subscribe(accelerometer => {
     *   console.log(accelerometer);
     * });
     *
     * // { acceleration: ..., inclination: ..., orientation: ..., pitch: ..., roll: ..., x: ..., y: ..., z: ... }
     * ```
     *
     * @returns Observable of accelerometer metric events
     */
    accelerometer(): Observable<Accelerometer>;
    /**
     * The `raw` brainwaves parameter emits epochs of 25 samples.
     *
     * Example
     * ```typescript
     * notion.brainwaves("raw").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * Raw Unfiltered - The `rawUnfiltered` brainwaves parameter emits epochs of 25 samples.
  
     * Example
     * ```typescript
     * notion.brainwaves("rawUnfiltered").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * Power By Band - The `powerByBand` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. beta) contains an average power value per channel.
     *
     * Example
     * ```typescript
     * notion.brainwaves("powerByBand").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * Power Spectral Density (PSD) - The `psd` brainwaves parameter emits epochs 4 times a second. Every frequency label (e.g. alpha) contains the computed FFT (Fast Fourier transform) value per channel (see the `psd` property), as well as the frequency ranges (see the `freqs` property).
     *
     * Example
     * ```typescript
     * notion.brainwaves("psd").subscribe(brainwaves => {
     *   console.log(brainwaves);
     * });
     * ```
     *
     * @param labels Name of metric properties to filter by
     * @returns Observable of brainwaves metric events
     */
    brainwaves(label: BrainwavesLabel, ...otherLabels: BrainwavesLabel[]): Observable<Epoch | PowerByBand | PSD>;
    /**
     * Example
     * ```typescript
     * notion.calm().subscribe(calm => {
     *   console.log(calm.probability);
     * });
     *
     * // 0.45
     * // 0.47
     * // 0.53
     * // 0.51
     * // ...
     * ```
     *
     * @returns Observable of calm events - awareness/calm alias
     */
    calm(): Observable<Calm>;
    /**
     * Observes signal quality data where each property is the name
     * of the channel and the value includes the standard deviation and
     * a status set by the device
     *
     * ```typescript
     * notion.signalQuality().subscribe(signalQuality => {
     *   console.log(signalQuality);
     * });
     *
     * // { FC6: { standardDeviation: 3.5, status: "good" }, C3: {...}, ... }
     * ```
     *
     * @returns Observable of signalQuality metric events
     */
    signalQuality(): Observable<SignalQuality>;
    /**
     * Observes last state of `settings` and all subsequent `settings` changes
     *
     * ```typescript
     * notion.settings().subscribe(settings => {
     *   console.log(settings.lsl);
     * });
     *
     * // true
     * // ...
     * ```
     *
     * @returns Observable of `settings` metric events
     */
    settings(): Observable<Settings>;
    /**
     * Example
     * ```typescript
     * notion.focus().subscribe(focus => {
     *   console.log(focus.probability);
     * });
     *
     * // 0.56
     * // 0.46
     * // 0.31
     * // 0.39
     * // ...
     * ```
     *
     * @returns Observable of focus events - awareness/focus alias
     */
    focus(): Observable<Focus>;
    /**
     * @param labels Name of metric properties to filter by
     * @returns Observable of kinesis metric events
     */
    kinesis(label: string, ...otherLabels: string[]): Observable<Kinesis>;
    /**
     * @param labels Name of metric properties to filter by
     * @returns Observable of predictions metric events
     */
    predictions(label: string, ...otherLabels: string[]): Observable<any>;
    /**
     * Observes last state of `status` and all subsequent `status` changes
     *
     * ```typescript
     * notion.status().subscribe(status => {
     *   console.log(status.state);
     * });
     *
     * // "online"
     * // ...
     * ```
     *
     * @returns Observable of `status` metric events
     */
    status(): Observable<DeviceStatus>;
    /**
     *
     * ```typescript
     * notion.training.record({
     *   metric: "kinesis",
     *   label: "push"
     * });
     *
     * notion.training.stop({
     *   metric: "kinesis",
     *   label: "push"
     * });
     * ```
     *
     * @returns Training methods
     */
    get training(): Training;
}
