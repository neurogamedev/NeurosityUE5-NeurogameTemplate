import { Observable } from "rxjs";
import { FirebaseApp, FirebaseUser, FirebaseDevice } from "./firebase";
import { WebsocketClient } from "./websocket";
import { Timesync } from "../timesync";
import { SubscriptionManager } from "../subscriptions/SubscriptionManager";
import { Client } from "../types/client";
import { Actions } from "../types/actions";
import { Metrics } from "../types/metrics";
import { NotionOptions } from "../types/options";
import { SkillsClient } from "../types/skill";
import { Credentials, CustomToken, EmailAndPassword } from "../types/credentials";
import { ChangeSettings } from "../types/settings";
import { DeviceStatus } from "../types/status";
import { DeviceInfo, DeviceSelector } from "../types/deviceInfo";
export { credentialWithLink, createUser, SERVER_TIMESTAMP } from "./firebase";
/**
 * @hidden
 */
export declare class ApiClient implements Client {
    user: any;
    protected options: NotionOptions;
    protected firebaseApp: FirebaseApp;
    protected firebaseUser: FirebaseUser;
    protected firebaseDevice: FirebaseDevice;
    protected websocket: WebsocketClient;
    protected timesync: Timesync;
    protected subscriptionManager: SubscriptionManager;
    defaultServerType: string;
    localServerType: string;
    constructor(options: NotionOptions);
    onDeviceChange(): Observable<DeviceInfo>;
    private setAutoSelectedDevice;
    setWebsocket(socketUrl: string, deviceId: string): Promise<void>;
    unsetWebsocket(): void;
    get actions(): Actions;
    disconnect(): Promise<any>;
    getInfo(): Promise<any>;
    login(credentials: Credentials): Promise<any>;
    logout(): Promise<any>;
    onAuthStateChanged(): Observable<{
        selectedDevice: DeviceInfo;
        delete(): Promise<void>;
        emailVerified: boolean;
        getIdTokenResult(forceRefresh?: boolean): Promise<import("@firebase/auth-types").IdTokenResult>;
        getIdToken(forceRefresh?: boolean): Promise<string>;
        isAnonymous: boolean;
        linkAndRetrieveDataWithCredential(credential: import("@firebase/auth-types").AuthCredential): Promise<import("@firebase/auth-types").UserCredential>;
        linkWithCredential(credential: import("@firebase/auth-types").AuthCredential): Promise<import("@firebase/auth-types").UserCredential>;
        linkWithPhoneNumber(phoneNumber: string, applicationVerifier: import("@firebase/auth-types").ApplicationVerifier): Promise<import("@firebase/auth-types").ConfirmationResult>;
        linkWithPopup(provider: import("@firebase/auth-types").AuthProvider): Promise<import("@firebase/auth-types").UserCredential>;
        linkWithRedirect(provider: import("@firebase/auth-types").AuthProvider): Promise<void>;
        metadata: import("@firebase/auth-types").UserMetadata;
        multiFactor: import("@firebase/auth-types").MultiFactorUser;
        phoneNumber: string;
        providerData: import("@firebase/auth-types").UserInfo[];
        reauthenticateAndRetrieveDataWithCredential(credential: import("@firebase/auth-types").AuthCredential): Promise<import("@firebase/auth-types").UserCredential>;
        reauthenticateWithCredential(credential: import("@firebase/auth-types").AuthCredential): Promise<import("@firebase/auth-types").UserCredential>;
        reauthenticateWithPhoneNumber(phoneNumber: string, applicationVerifier: import("@firebase/auth-types").ApplicationVerifier): Promise<import("@firebase/auth-types").ConfirmationResult>;
        reauthenticateWithPopup(provider: import("@firebase/auth-types").AuthProvider): Promise<import("@firebase/auth-types").UserCredential>;
        reauthenticateWithRedirect(provider: import("@firebase/auth-types").AuthProvider): Promise<void>;
        refreshToken: string;
        reload(): Promise<void>;
        sendEmailVerification(actionCodeSettings?: import("@firebase/auth-types").ActionCodeSettings): Promise<void>;
        tenantId: string;
        toJSON(): Object;
        unlink(providerId: string): Promise<import("@firebase/auth-types").User>;
        updateEmail(newEmail: string): Promise<void>;
        updatePassword(newPassword: string): Promise<void>;
        updatePhoneNumber(phoneCredential: import("@firebase/auth-types").AuthCredential): Promise<void>;
        updateProfile(profile: {
            displayName?: string;
            photoURL?: string;
        }): Promise<void>;
        verifyBeforeUpdateEmail(newEmail: string, actionCodeSettings?: import("@firebase/auth-types").ActionCodeSettings): Promise<void>;
        displayName: string;
        email: string;
        photoURL: string;
        providerId: string;
        uid: string;
    }>;
    getDevices(): Promise<DeviceInfo[]>;
    addDevice(deviceId: string): Promise<void>;
    removeDevice(deviceId: string): Promise<void>;
    onUserDevicesChange(): Observable<DeviceInfo[]>;
    didSelectDevice(): boolean;
    selectDevice(deviceSelector: DeviceSelector): Promise<DeviceInfo>;
    getSelectedDevice(): Promise<DeviceInfo>;
    status(): Observable<DeviceStatus>;
    observeNamespace(namespace: string): Observable<any>;
    onceNamespace(namespace: string): Promise<any>;
    get metrics(): Metrics;
    createAccount(credentials: EmailAndPassword): Promise<any>;
    deleteAccount(): Promise<void>;
    createCustomToken(): Promise<CustomToken>;
    get skills(): SkillsClient;
    get timestamp(): number;
    getTimesyncOffset(): number;
    changeSettings(settings: ChangeSettings): Promise<void>;
    goOffline(): void;
    goOnline(): void;
}
