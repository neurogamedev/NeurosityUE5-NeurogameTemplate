"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const operators_2 = require("rxjs/operators");
const outliers_1 = __importDefault(require("outliers"));
const whileOnline_1 = require("../utils/whileOnline");
const defaultOptions = {
    bufferSize: 100,
    updateInterval: 1 * 60 * 1000 // every minute
};
class Timesync {
    constructor(options) {
        this._offset = 0;
        this.options = Object.assign(Object.assign({}, defaultOptions), options);
        this.start();
    }
    start() {
        const { bufferSize, updateInterval, status$ } = this.options;
        const burst$ = rxjs_1.range(0, bufferSize);
        const timer$ = rxjs_1.timer(updateInterval, updateInterval).pipe(operators_1.map((i) => bufferSize + i), whileOnline_1.whileOnline({
            status$,
            allowWhileOnSleepMode: true
        }));
        const firstTimeDeviceIsOnline$ = status$.pipe(operators_1.filter((status) => status.state === "online"), operators_1.take(1));
        firstTimeDeviceIsOnline$
            .pipe(operators_2.switchMap(() => {
            return burst$.pipe(operators_1.concat(timer$), this.toOffset(), operators_2.bufferCount(bufferSize, 1), this.filterOutliers(), operators_1.map((list) => this.average(list)));
        }))
            .subscribe((offset) => {
            this._offset = offset;
        });
    }
    filterOutliers() {
        return rxjs_1.pipe(operators_1.map((offsets) => {
            return offsets.filter(outliers_1.default());
        }));
    }
    toOffset() {
        const { getTimesync } = this.options;
        return rxjs_1.pipe(operators_2.concatMap(() => __awaiter(this, void 0, void 0, function* () {
            const requestStartTime = Date.now();
            const [error, serverTime] = yield getTimesync()
                .then((offset) => [null, offset])
                .catch((error) => [error]);
            if (error) {
                return 0;
            }
            const responseEndTime = Date.now();
            const oneWayDuration = (responseEndTime - requestStartTime) / 2;
            const offset = responseEndTime - oneWayDuration - serverTime;
            return offset;
        })));
    }
    average(list) {
        return Math.round(list.reduce((acc, number) => acc + number) / list.length);
    }
    get offset() {
        return this._offset;
    }
    get timestamp() {
        return Date.now() + this._offset;
    }
}
exports.Timesync = Timesync;
