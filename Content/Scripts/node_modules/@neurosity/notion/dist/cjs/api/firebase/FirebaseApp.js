"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_1 = __importDefault(require("firebase/app"));
require("firebase/database");
require("firebase/auth");
require("firebase/functions");
require("firebase/firestore");
const config_1 = require("./config");
exports.SERVER_TIMESTAMP = app_1.default.database.ServerValue.TIMESTAMP;
/**
 * @hidden
 */
class FirebaseApp {
    constructor(options) {
        this.app = this.getApp(options.deviceId);
        this.standalone = this.app.name === options.deviceId;
    }
    getApp(deviceId) {
        const moduleApps = app_1.default.apps;
        const browserApps = typeof window !== "undefined" &&
            "firebase" in window &&
            "apps" in window.firebase
            ? window.firebase.apps
            : [];
        const neurosityApp = [...moduleApps, ...browserApps].find((app) => app.name === "[DEFAULT]" &&
            app.options.databaseURL === config_1.config.databaseURL);
        if (neurosityApp) {
            return neurosityApp;
        }
        if (deviceId) {
            const notionAppName = deviceId;
            const notionApp = moduleApps.find((app) => app.name === notionAppName);
            return notionApp
                ? notionApp
                : app_1.default.initializeApp(config_1.config, notionAppName);
        }
        return app_1.default.initializeApp(config_1.config);
    }
    goOnline() {
        this.app.database().goOnline();
    }
    goOffline() {
        this.app.database().goOffline();
    }
    disconnect() {
        if (this.standalone) {
            return this.app.delete();
        }
        return Promise.resolve();
    }
}
exports.FirebaseApp = FirebaseApp;
